package ar.edu.utn.frc.tup.lciv.services.impl.external;

import ar.edu.utn.frc.tup.lciv.Dtos.common.external.CosmeticCommonDTO;
import ar.edu.utn.frc.tup.lciv.clients.FortniteClientExternal;
import ar.edu.utn.frc.tup.lciv.clients.dtos.external.CosmeticClientDTO;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class CosmeticServiceTest {

    @Mock
    private FortniteClientExternal fortniteClientExternal;

    @InjectMocks
    private CosmeticService cosmeticService;

    private CosmeticClientDTO cosmeticClientDTO;

    @BeforeEach
    void setUp() {
        cosmeticClientDTO = createCosmeticClientDTO();
    }

    private CosmeticClientDTO createCosmeticClientDTO() {
        CosmeticClientDTO.Cosmetic.Introduction introduction = new CosmeticClientDTO.Cosmetic.Introduction("2", "remix", "Intro Text");
        CosmeticClientDTO.Cosmetic.Rarity rarity = new CosmeticClientDTO.Cosmetic.Rarity("Rare", "Rare Display");
        CosmeticClientDTO.Cosmetic.Images images = new CosmeticClientDTO.Cosmetic.Images("Icon URL");
        CosmeticClientDTO.Cosmetic.Type type = new CosmeticClientDTO.Cosmetic.Type("Type 1", "Type Display");

        CosmeticClientDTO.Cosmetic cosmetic1 = new CosmeticClientDTO.Cosmetic("1", "Cosmetic 1", "Description 1", type, rarity, introduction, images);
        CosmeticClientDTO.Cosmetic cosmetic2 = new CosmeticClientDTO.Cosmetic("2", "Cosmetic 2", "Description 2", type, rarity, introduction, images);

        CosmeticClientDTO.CosmeticData data = new CosmeticClientDTO.CosmeticData(Arrays.asList(cosmetic1, cosmetic2));
        return new CosmeticClientDTO(data);
    }

    @Test
    void testGetCosmetics() {
        when(fortniteClientExternal.getCosmeticData()).thenReturn(cosmeticClientDTO);

        List<CosmeticCommonDTO> result = cosmeticService.getCosmetics(null, null, null, null, 10);

        assertEquals(2, result.size());

        // Verify the first cosmetic
        CosmeticCommonDTO cosmetic1 = result.get(0);
        assertEquals("1", cosmetic1.getId());
        assertEquals("Cosmetic 1", cosmetic1.getName());
        assertEquals("Description 1", cosmetic1.getDescription());
        assertEquals("Rare Display", cosmetic1.getRarity());
        assertEquals("5", cosmetic1.getChapter());
        assertEquals("remix", cosmetic1.getSeason());
        assertEquals("Icon URL", cosmetic1.getIcon());

        // Verify the second cosmetic
        CosmeticCommonDTO cosmetic2 = result.get(1);
        assertEquals("2", cosmetic2.getId());
        assertEquals("Cosmetic 2", cosmetic2.getName());
        assertEquals("Description 2", cosmetic2.getDescription());
        assertEquals("Rare Display", cosmetic2.getRarity());
        assertEquals("5", cosmetic2.getChapter());
        assertEquals("remix", cosmetic2.getSeason());
        assertEquals("Icon URL", cosmetic2.getIcon());
    }
}